diff --git a/core/lib/Drupal/Core/Recipe/InputCollector.php b/core/lib/Drupal/Core/Recipe/InputCollector.php
new file mode 100644
index 0000000000000000000000000000000000000000..4913ea603efd589d1fdcc67e59aa5b856516a1a5
--- /dev/null
+++ b/core/lib/Drupal/Core/Recipe/InputCollector.php
@@ -0,0 +1,67 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Recipe;
+
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * @internal
+ *   This API is experimental.
+ */
+final class InputCollector implements ContainerInjectionInterface {
+
+  private function __construct(
+    private readonly ConfigFactoryInterface $configFactory,
+  ) {}
+
+  public static function create(ContainerInterface $container): self {
+    return new self(
+      $container->get(ConfigFactoryInterface::class),
+    );
+  }
+
+  public function prepare(Recipe $recipe): void {
+    static $processed = [];
+
+    if (in_array($recipe->path, $processed, TRUE)) {
+      return;
+    }
+
+    foreach ($recipe->recipes->recipes as $dependency) {
+      $this->prepare($dependency);
+    }
+
+    $values = [];
+    /** @var array{from: string, source?: string} $definition */
+    foreach ($recipe->inputDefinitions as $key => $definition) {
+      // Add more ways of collecting values here, as needed. We use a match
+      // expression because value collection is not extensible.
+      if ($definition['from'] === 'config') {
+        assert(array_key_exists('source', $definition));
+        $values[$key] = $this->getFromConfig($definition);
+      }
+    }
+    $recipe->setInputValues($values);
+    $processed[] = $recipe->path;
+  }
+
+  /**
+   * Fetches a value from config.
+   *
+   * @param array{source: string} $definition
+   *   The input definition. Must have a `source` element, which is a string
+   *   in the form `CONFIG_NAME:KEY`.
+   *
+   * @return mixed
+   *   A value from config.
+   */
+  private function getFromConfig(array $definition): mixed {
+    [$name, $key] = explode(':', $definition['source'], 2);
+    return $this->configFactory->get($name)->get($key);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Recipe/Recipe.php b/core/lib/Drupal/Core/Recipe/Recipe.php
index 0312de9337010aa33917948c19737b5249595c41..716ff244905ec01454b7d28fe5e738bcd6a326d3 100644
--- a/core/lib/Drupal/Core/Recipe/Recipe.php
+++ b/core/lib/Drupal/Core/Recipe/Recipe.php
@@ -33,6 +33,41 @@ final class Recipe {

   const COMPOSER_PROJECT_TYPE = 'drupal-recipe';

+  /**
+   * @var array<string, mixed>|null
+   */
+  private ?array $inputValues = NULL;
+
+  /**
+   * @var array<string, array<string, mixed>>
+   */
+  public readonly array $inputDefinitions;
+
+  /**
+   * @param string $name
+   *   The human-readable name of the recipe.
+   * @param string $description
+   *   A short description of the recipe.
+   * @param string $type
+   *   The recipe type.
+   * @param \Drupal\Core\Recipe\RecipeConfigurator $recipes
+   *   The recipe configurator, which lists the recipes that will be applied
+   *   before this one.
+   * @param \Drupal\Core\Recipe\InstallConfigurator $install
+   *   The install configurator, which lists the extensions this recipe will
+   *   install.
+   * @param \Drupal\Core\Recipe\ConfigConfigurator $config
+   *   The config configurator, which lists the config that this recipe will
+   *   install, and what config actions will be taken.
+   * @param \Drupal\Core\DefaultContent\Finder $content
+   *   The default content finder.
+   * @param string $path
+   *   The recipe's path.
+   * @param array<string, array<string, mixed>> $input_definitions
+   *   The recipe's input definitions, keyed by name. This is an array of arrays
+   *   where each sub-array has a `from` element, and the other elements vary
+   *   depending on what `from` is.
+   */
   public function __construct(
     public readonly string $name,
     public readonly string $description,
@@ -42,7 +77,10 @@ public function __construct(
     public readonly ConfigConfigurator $config,
     public readonly Finder $content,
     public readonly string $path,
+    array $input_definitions,
   ) {
+    assert(ksort($input_definitions));
+    $this->inputDefinitions = $input_definitions;
   }

   /**
@@ -61,7 +99,7 @@ public static function createFromDirectory(string $path): static {
     $install = new InstallConfigurator($recipe_data['install'], \Drupal::service('extension.list.module'), \Drupal::service('extension.list.theme'));
     $config = new ConfigConfigurator($recipe_data['config'], $path, \Drupal::service('config.storage'));
     $content = new Finder($path . '/content');
-    return new static($recipe_data['name'], $recipe_data['description'], $recipe_data['type'], $recipes, $install, $config, $content, $path);
+    return new static($recipe_data['name'], $recipe_data['description'], $recipe_data['type'], $recipes, $install, $config, $content, $path, $recipe_data['input'] ?? []);
   }

   /**
@@ -151,6 +189,17 @@ private static function parse(string $file): array {
           ]),
         ]),
       ]),
+      'input' => new Optional([
+        new Type('array'),
+        new All([
+          new Collection([
+            'from' => new IdenticalTo('config'),
+            'source' => [
+              new Regex('/^(\w+\.)+\w+:\w+$/', message: 'This value must be in the format `CONFIG_NAME:KEY`.'),
+            ],
+          ]),
+        ]),
+      ]),
       'config' => new Optional([
         new Collection([
           // Each entry in the `import` list can either be `*` (import all of
@@ -285,4 +334,36 @@ private static function validateConfigActions(mixed $value, ExecutionContextInte
     }
   }

+  /**
+   * @param array<string, mixed> $values
+   *   The input values, keyed by name. The keys need to match the ones in the
+   *   recipe's input definitions, and all the defined inputs must have a
+   *   corresponding value in this array.
+   */
+  public function setInputValues(array $values): void {
+    if (is_array($this->inputValues)) {
+      throw new \LogicException("Recipe input values cannot be changed once they have been set.");
+    }
+    assert(ksort($values));
+    assert(array_keys($values) === array_keys($this->inputDefinitions));
+    $this->inputValues = $values;
+  }
+
+  /**
+   * @return array<string, mixed>
+   */
+  public function getInputValues(bool $prefixed = FALSE): array {
+    $values = [];
+    foreach ($this->recipes->recipes as $dependency) {
+      $values = array_merge($values, $dependency->getInputValues(TRUE));
+    }
+    foreach ($this->inputValues ?? [] as $key => $value) {
+      if ($prefixed) {
+        $key = basename($this->path) . '.' . $key;
+      }
+      $values[$key] = $value;
+    }
+    return $values;
+  }
+
 }
diff --git a/core/lib/Drupal/Core/Recipe/RecipeCommand.php b/core/lib/Drupal/Core/Recipe/RecipeCommand.php
index 3040e40960475a77d7e848350a26329ab72a5992..4bf0954f965e50025ce630e02e5bdbe53912d4e8 100644
--- a/core/lib/Drupal/Core/Recipe/RecipeCommand.php
+++ b/core/lib/Drupal/Core/Recipe/RecipeCommand.php
@@ -73,6 +73,7 @@ protected function execute(InputInterface $input, OutputInterface $output): int
     /** @var \Drupal\Core\Config\Checkpoint\CheckpointStorageInterface $checkpoint_storage */
     $checkpoint_storage = $container->get('config.storage.checkpoint');
     $recipe = Recipe::createFromDirectory($recipe_path);
+    InputCollector::create($container)->prepare($recipe);
     if ($checkpoint_storage instanceof LoggerAwareInterface) {
       $logger = new ConsoleLogger($output, [
         // The checkpoint storage logs a notice if it decides to not create a
diff --git a/core/lib/Drupal/Core/Recipe/RecipeRunner.php b/core/lib/Drupal/Core/Recipe/RecipeRunner.php
index 626c203d0371f00142283f6d037039908fcc3855..000bfd0cd5c4c265830b7d0b424017fd33b7463d 100644
--- a/core/lib/Drupal/Core/Recipe/RecipeRunner.php
+++ b/core/lib/Drupal/Core/Recipe/RecipeRunner.php
@@ -30,11 +30,23 @@ final class RecipeRunner {
   /**
    * @param \Drupal\Core\Recipe\Recipe $recipe
    *   The recipe to apply.
+   * @param bool $collect_input
+   *   (optional) Whether to collect input values (if the recipe, or any of its
+   *   dependencies, require any) before applying. Defaults to TRUE. Internal
+   *   use only.
    */
-  public static function processRecipe(Recipe $recipe): void {
-    static::processRecipes($recipe->recipes);
+  public static function processRecipe(Recipe $recipe, bool $collect_input = TRUE): void {
+    // If we need to collect input for this recipe or any of its dependencies,
+    // do that now.
+    if ($collect_input) {
+      \Drupal::classResolver(InputCollector::class)->prepare($recipe);
+    }
+
+    foreach ($recipe->recipes->recipes as $dependency) {
+      static::processRecipe($dependency, FALSE);
+    }
     static::processInstall($recipe->install, $recipe->config->getConfigStorage());
-    static::processConfiguration($recipe->config);
+    static::processConfiguration($recipe);
     static::processContent($recipe->content);
     static::triggerEvent($recipe);
   }
@@ -54,18 +66,6 @@ public static function triggerEvent(Recipe $recipe, ?array &$context = NULL): vo
     $context['results']['recipe'][] = $recipe->name;
   }

-  /**
-   * Applies any recipes listed by the recipe.
-   *
-   * @param \Drupal\Core\Recipe\RecipeConfigurator $recipes
-   *   The list of recipes to apply.
-   */
-  protected static function processRecipes(RecipeConfigurator $recipes): void {
-    foreach ($recipes->recipes as $recipe) {
-      static::processRecipe($recipe);
-    }
-  }
-
   /**
    * Installs the extensions.
    *
@@ -89,10 +89,10 @@ protected static function processInstall(InstallConfigurator $install, StorageIn
   /**
    * Creates configuration and applies configuration actions.
    *
-   * @param \Drupal\Core\Recipe\ConfigConfigurator $config
-   *   The config configurator from the recipe.
+   * @param \Drupal\Core\Recipe\Recipe $recipe
+   *   The recipe being applied.
    */
-  protected static function processConfiguration(ConfigConfigurator $config): void {
+  protected static function processConfiguration(Recipe $recipe): void {
     $config_installer = new RecipeConfigInstaller(
       \Drupal::service('config.factory'),
       \Drupal::service('config.storage'),
@@ -102,17 +102,23 @@ protected static function processConfiguration(ConfigConfigurator $config): void
       NULL,
       \Drupal::service('extension.path.resolver'));

+    $config = $recipe->config;
     // Create configuration that is either supplied by the recipe or listed in
     // the config.import section that does not exist.
     $config_installer->installRecipeConfig($config);

     if (!empty($config->config['actions'])) {
+      $values = $recipe->getInputValues();
+      // Prefix all the replacement strings with `%`.
+      $keys = array_map(fn ($k) => "%$k", array_keys($values));
+      $replace = array_combine($keys, $values);
+
       // Process the actions.
       /** @var \Drupal\Core\Config\Action\ConfigActionManager $config_action_manager */
       $config_action_manager = \Drupal::service('plugin.manager.config_action');
       foreach ($config->config['actions'] as $config_name => $actions) {
         foreach ($actions as $action_id => $data) {
-          $config_action_manager->applyAction($action_id, $config_name, $data);
+          $config_action_manager->applyAction($action_id, $config_name, static::searchAndReplace($data, $replace));
         }
       }
     }
@@ -297,7 +303,7 @@ public static function installTheme(string $theme, StorageInterface|Recipe $reci
    *   The batch context if called by a batch.
    */
   public static function installConfig(Recipe $recipe, ?array &$context = NULL): void {
-    static::processConfiguration($recipe->config);
+    static::processConfiguration($recipe);
     $context['message'] = t('Installed configuration for %recipe recipe.', ['%recipe' => $recipe->name]);
     $context['results']['config'][] = $recipe->name;
   }
@@ -316,4 +322,26 @@ public static function installContent(Recipe $recipe, ?array &$context = NULL):
     $context['results']['content'][] = $recipe->name;
   }

+  /**
+   * @param mixed $data
+   *   The data that will have placeholders replaced.
+   * @param array<string, mixed> $replace
+   *   An array whose keys are the placeholders to be replaced, and whose values
+   *   are the replacements.
+   *
+   * @return mixed
+   *   The passed data, with placeholders replaced.
+   */
+  private static function searchAndReplace(mixed $data, array $replace): mixed {
+    if (is_string($data)) {
+      $data = str_replace(array_keys($replace), $replace, $data);
+    }
+    elseif (is_array($data)) {
+      foreach ($data as $key => $value) {
+        $data[$key] = static::searchAndReplace($value, $replace);
+      }
+    }
+    return $data;
+  }
+
 }
